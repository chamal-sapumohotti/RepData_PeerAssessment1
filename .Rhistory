library(RMySQL)
Sys.getenv('R_ENVIRON')
Sys.getenv('R_ENVIRON')
Sys.getenv('MYSQL_HOME')
library(RMySQL)
library(RMySQL)
db <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
db
result <- dbGetQuery(db, "show databases;");
result
result <- dbGetQuery(db, "show databases");
result
result
dbDisconnect(db)
tbls <- dbListTables(db);
db <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu", db="hg19")
tbls <- dbListTables(db);
str(tbls)
head(tbls)
sort(tbls)
x<-sort(tbls)
head(tbls, 100)
dbListFields(db, "affyU133Plus2")
data <- dbReadTable(db,"affyU133Plus2" )
dbDisconnect(db)
dbDisconnect(db)
.5^10
.5^10 * 11
(1160-1020)/50
?dnorm
pnorm(2.8)
1-pnorm(2.8)
qnorm(.75)
qnorm(.75, 1020, 50)
10
?ppois
ppois(3, 10)
ppois(40, 45)
ppois(2, 5)
?pbinom
pbinom(2, 500, 0.01)
x<- cumsum(rnorm(1000))/(1:1000)
plot(x, type='l')
x<- cumsum(rbinom(1000, 1, 0.5))/(1:1000)
plot(x, type='l')
x<- cumsum(rbinom(1000, 1, 0.5))/(1:1000)
plot(x, type='l')
v = 0.25
se = 0.5/10
se
0.45-0.5
pnorm(-1)
library(UsingR)
install.packages("UsingR")
data(father.son)
library(UsingR)
data(father.son)
str(father.son)
qnorm(0.95)
mean(father.son$fheight + c(-1, 1)*sd(father.son$fheight)/sqrt(length(father.son$fheight)))/12
mean(father.son$fheight + c(-1, 1)*sd(father.son$fheight)/sqrt(length(father.son$fheight)))/12
mean(father.son$fheight) + (c(-1, 1)*sd(father.son$fheight)/sqrt(length(father.son$fheight)))/12
(mean(father.son$fheight) + c(-1, 1)*sd(father.son$fheight)/sqrt(length(father.son$fheight)))/12
(mean(father.son$fheight) + c(-1, 1)*sd(father.son$fheight)/sqrt(length(father.son$fheight)))
(mean(father.son$fheight) + c(-1, 1)*qnorm(0.95)sd(father.son$fheight)/sqrt(length(father.son$fheight)))
(mean(father.son$fheight) + c(-1, 1)*qnorm(0.95)*sd(father.son$fheight)/sqrt(length(father.son$fheight)))
?poisson.test
poisson.test(10, T=1, conf.level = 0.95)
poisson.test(10, T=1, conf.level = 0.95)$conf
poisson.test(10, T=60, conf.level = 0.95)$conf
poisson.test(10, T=1, conf.level = 0.95)$conf
poisson.test(10, T=1, conf.level = 0.95)$conf
poisson.test(600, T=60, conf.level = 0.95)$conf
pt(2.5, 15)
pt(2.5, 15, lower.tail=F)
pnorm(2)
pnorm(2, lower.tail = F)
pbinom(7/8, 8, prob=1/2)
pbinom(7/8, prob=1/2)
ppois(0.1, 0.05)
ppois(0.1, 0.05, lower.tail=F)
ppois(0.09, 0.05, lower.tail=F)
ppois(0.09, 0.05, lower.tail=F)
ppois(9, 5, lower.tail=F)
?pt
qt(0.95)
qt(0.95, df=8)
qt(0.95, df=8) * 10
1100+qt(0.95, df=8) * 10 * c(-1, 1)
1100+qt(0.975, df=8) * 10 * c(-1, 1)
?I
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
swirl()
plot(child~parent, galton)
plot(jitter(child, 4)~parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
xw <- x*w
xw
xww <- x * w * w
ww <- w*w
w((x-1.077)^2)
w
w*((x-1.077)^2)
sum(w*((x-1.077)^2))
sum(w*((x-0.3)^2))
sum(w*((x-0.1471)^2))
sum(w*((x-0.0025)^2))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(x * y) / sum(x*x)
data(mtcars)
?lm
fit <- lm(mpg ~ weight, data=mtcars)
fit <- lm(mpg ~ wt, data=mtcars)
fit$coefficients
5 * 2
.5 * 2
.4 * 1.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xb <- mean(x)
sd <- sqrt(var(x))
(8.58 - xb) /sd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~)
fit <- lm(y~x)
fit$coefficients
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
swirl()
library(swirl)
swirl()
fit <- lm(child ~ parent, data=galton)
fit$residuals
summary(fit)
boxplot(fit$residuals)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
?est
est
est
?est
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(fit$coefficients[2], fit$coefficients[1]))
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes, varEst))
all.equal(varChild, varEst + varRes
)
attenu
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
load("C:/Users/my/Desktop/2 - 1 - What is Algorithmic Thinking_ (9_24).mp4")
swirl()
library(swirl)
swirl()
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Education, swiss$Examination)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec = swiss$Examination + swiss$Catholic
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . ec, swiss)
efit <- lm(Fertility ~ .+ec, swiss)
all$coefficients - efit$coefficients
library(swirl)
swirl()
swirl()
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[, 2])
sapply(InsectSprays, class)
fit <- lm(count ~ spray, InsectSprays)
fit$coefficients
summary(fit)$coef
est <- summary(fit)$coef[, 1]
est
mean(sA)
mean(sB)
nfit <- lm(count ~ spray -1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, 'C')
fit2 <- lm(count, spray2, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[3] - fit$coef[2])/1.6011
(fit$coef[2] - fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex == "Female", ])
lmf <- lm(Numeric[Sex=='Female'] ~ Year[Sex=="Female"], hunger)
lmF <- lm(Numeric[Sex=='Female'] ~ Year[Sex=="Female"], hunger)
lmM <- lm(Numeric[Sex=='Male'] ~ Year[Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Sex*Year, data=hunber)
lmInter <- lm(Numeric ~ Sex*Year, data=hunger)
summary(lmInter)
swiss
par(mfrow=c(2,2))
fit <- lm(Fertility ~ ., swiss)
plot(fit)
str(swis)
str(swiss)
boxplot(swiss)
boxplot(swiss$Fertility)
par(mfrow=c(1,1))
boxplot(swiss$Fertility)
swiss
?influence.measures
rm(list=ls())
?rm
swirl()
par(mfrow=c(1,1))
swirl()
fit <- lm(y ~x, out2)
plot(fit, which=1)
fitno<-lm(y ~ x, out2[-2, ])
fitno<-lm(y ~ x, out2[-1, ])
plot(fit, which =1)
plot(fitno, which =1)
plot(fitno, which =1)
fitno<-lm(y ~ x, out2[-1, ])
plot(fitno, which =1)
fit<-lm(y ~ x, out2)
coef(fit)-coef(fitno)
fitno <- lm(y ~x, out[2:, ])
fitno <- lm(y ~x, out2[2:, ])
fitno <- lm(y ~x, out2[-1, ])
plot(fitno, which =1)
plot(fitno)
head(dfbeta(fit))
rexno <- out2[1, "y"] - predict(fitno, out2, [1, ])
resno <- out2[1, "y"] - predict(fitno, out2[1, ])
1 - resid(fit)[1]/resno
resno
info()
?bye
?main
play()
out2
fitno <- lm(y ~x, out2[-1, ])
fitno$residuals
a <- out2[-1,]
a
fit <- lm(y ~x, out2)
plot(fit, which=1)
plot(fitno, which=1)
resno <- out2[1, "y"] - predict(fitno, out2[1, ])
resno
resid(fit)[1]
1 - resid(fit)[1]/resno
nxt()
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/49)
rstd <- fit$residuals/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit , which=2)
sigma1 <- sqrt(deviance(fitno)/48)
resid(fit)[1]*sigma1*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fit, out2) - predict(fitno, out2)
sum(dy ^ 2) / ( 2 * sigma ^2)
cooks.distance(fit)[1]
plot(fit, which=5)
rm(list=ls())
swirl()
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl <- lm(Fertility ~ . - Education, swiss)
mdl <- lm(Fertility ~ ., swiss)
mdl2 <- lm(Fertility ~ . - Education, swiss)
mdl2 <- lm(Fertility ~ . - Examination, swiss)
vlf(mdl)
vif(mdl)
vif(mdl2)
rm(list=ls())
head(mtcars)
cfit <- lm(mpg ~ wt + cyl)
cfit <- lm(mpg ~ wt + cyl, mtcars)
cfit$coefficients
data(mtcars)
head(mtcars)
str(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
str(mtcars)
cfit <- lm(mpg ~ wt + cyl, mtcars)
cfit$coefficients
summary(cfit)$coefficients
cfit2 <- lm(mpg ~ cyl, mtcars)
summary(cfit2)$coefficients
cfit3 <- lm(mpg ~ cyl * weight, mtcars)
cfit3 <- lm(mpg ~ cyl * wt, mtcars)
summary(cfit3)$coefficients
summary(cfit)$coefficients
mtcars
str(mtcars)
e
exp
E
pi
e
?exp
exp(0)
exp(2.734)
exp(-1.68)
exp(.1066)
exp(.1066*2)
1.112489*1.112489
swirl()
library(swirl)
swirl()
swirl()
library(kernlab)
data(spam)
?spam
library(kernlab)
data(spam)
train <- rbinom(4601, size=1, prob=0.5)
table(train)
set.seed(3435)
train <- rbinom(4601, size=1, prob=0.5)
table(train)
tData <- spam[train, ]
train <- spam[train, ]
test <- spam[!train, ]
trainSamp <- rbinom(4601, size=1, prob=0.5)
table(train)
set.seed(3435)
trainSamp <- rbinom(4601, size=1, prob=0.5)
table(train)
table(trainSamp)
set.seed(3435)
trainSamp <- rbinom(4601, size=1, prob=0.5)
table(trainSamp)
train <- spam[train, ]
train <- spam[trainSamp, ]
test <- spam[!trainSamp, ]
names(train)
head(train)
head(test)
head(train)
head(spam)
train <- spam[trainSamp, ]
test <- spam[!trainSamp, ]
head(train)
trainSamp
data(spam)
set.seed(3435)
trainSamp <- rbinom(4601, size=1, prob=0.5)
table(trainSamp)
train <- spam[trainSamp, ]
test <- spam[!trainSamp, ]
head(train)
train <- spam[trainSamp==1, ]
test <- spam[!trainSamp==1, ]
head(train)
head(test)
table(train$type)
table(spam$type)
plot(train$capitalAve ~ trainSpam$type)
plot(train$capitalAve ~ train$type)
plot(log(train$capitalAve) ~ train$type)
plot(log10(train$capitalAve) ~ train$type)
plot(log10(train$capitalAve+1) ~ train$type)
plot(train[, 1:4])
plot(train[, 1:4]) \
hCluster <- hclust(dist(t(train[, 1:57])))
plot(hCluster)
?t
?dist
hCluster <- hclust(dist(t(log10(train[, 1:57]+1))))
plot(hCluster)
require(rCharts)
install.packages(rCharts)
install.packages("rCharts")
require(rCharts)
?rCharts
install.packages("installer")
install.packages("installr")
require(installr)
updateR()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training$CompressiveStrength)
library(Hmisc)
cut <- cut2(Hmisc, 4)
cut <- cut2(training$index, 4)
str(training)
qplot(training)
qplot(training$CompressiveStrength)
plot(training$CompressiveStrength)
agecut <- cut2(training$Age)
str(agecut)
table(agecut)
plot(training$CompressiveStrength, col=agecut)
agecut <- cut2(training$Age, 4)
table(agecut)
plot(training$CompressiveStrength, col=agecut)
?cut2
agecut <- cut2(training$Age, cut2=4)
agecut <- cut2(training$Age, cuts=4)
str(agecut)
agecut <- cut2(training$Age, g=4)
str(agecut)
table(agecut)
x = 1:100
agecut <- cut2(training$Age,4)
table(agecut)
agecut <- cut2(training$Age, g=4)
plot(training$CompressiveStrength, col=agecut)
agecut <- cut2(training$FlyAsh, g=4)
plot(training$CompressiveStrength, col=agecut)
table(agecut)
cor(training)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
summary(vowe.train)
summary(vowel.train)
str(vowel.tra)
str(vowel.train)
?vowel.train
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
fitrpart <- train(y ~ . , data=vowel.train, method="rf")
library(caret)
set.seed(33833)
fitrpart <- train(y ~ . , data=vowel.train, method="rf")
?gbm
fitgbm <- train(y ~ . , data=vowel.train, method="gbm")
predrpart <- predict(fitrpart, newdata = vowel.test)
predgbm <- predict(fitgbm, newdata=vowel.test)
?gbm
confusionMatrix(predrpart, vowel.test$y)
confusionMatrix(predgbm, vowel.test$y)
set.seed(33833)
fitgbm <- train(y ~ . , data=vowel.train, method="gbm")
predgbm <- predict(fitgbm, newdata=vowel.test)
confusionMatrix(predgbm, vowel.test$y)
aggreeList <- predrpart == predgbm
mean(aggreeList)
confusionMatrix(predrpart[aggreeList], vowel.test$y[aggreeList])
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
setwd("C:/Users/my/Desktop/R_programming/represearch")
data <- read.csv("activity.csv")
str(ata)
str(data)
summary(data)
?as.Date
setwd("C:/Users/my/Desktop/R_programming/represearch/RepData_PeerAssessment1")
setwd("C:/Users/my/Desktop/R_programming/represearch/RepData_PeerAssessment1")
unzip('activity.zip')
unzip('activity.zip')
activity <- read.csv('activity.csv)
activity <- read.csv('activity.csv')
?as.date
?as.Date
activity$date <- as.Date(activity$date, '%y-%m-%d')
summary(activity)
activity <- read.csv('activity.csv')
as.Date(activity$date, '%y-%m-%d')
head(activity)
as.Date(activity$date, '%Y-%m-%d')
activity$date2 <- as.Date(activity$date, '%Y-%m-%d')
head(activity)
tail(activity)
activity$date <- as.Date(activity$date, '%Y-%m-%d')
activity <- read.csv('activity.csv')
activity$date <- as.Date(activity$date, '%Y-%m-%d')
